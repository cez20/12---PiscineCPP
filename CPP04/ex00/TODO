TODO:

Pour chaque exercice:
[X] Fournir les tests les plus complets possible
[X] Les constructeurs et les destructeurs de chaque classse doivent afficher
	des message qui leur sont propres. NE PAS utiliser les memes messages pour toutes
	les classse

EX00:
[X] Implementer une classe simple de base Animal
[X] Elle possede un attribut protege (protected) std::string type 
[X] Implementez une classe Dog qui herite de Animal
[X] Implementez une class Cat qui herite de Animal
	[X] Ces 2 classes derives doivent initialiser leur type en fonction de leur nom 
		[X] Ainsi, le type de Dog sera "Dog" lorsquon appelle getType() quand Animal a ete initialise 
			grace au constructeur de Dog 
		[X] Le type de Cat, sera "Cat" lorsquon appelle getType() quand Animal a ete initialise 
			grace au constructeur de Cat
		[X] Le type de la classe Animal PEUT etre laisse vide ou initialise avec la 
			valeur de votre choix.
[X] Chaque animal doit etre capable d'utiliser la fonction membre makeSound()
	[X] Elle affichera un son coherent (les chat naboient pas)
[X] Aucun leak. 

[X] Executer le code se trouvant dans le main

[X] Pour s'assurer d'avoir bien compris
	[X] Implementez une classe WrongCat heritant d'une classe Wrong Animal
	[X] Dans le code de main, si vous remplacez Animal et Cat par Wrong Animal et Wrong cat 
	   le Wrong Cat devrait afficher le son du Wrong Animal. 


